### 1. API регистрации и аутентификации

#### POST /api/register
**Описание:**  
Регистрация нового пользователя в системе.

**Тело запроса:**  
- `username` (String): Имя пользователя.
- `password` (String): Пароль пользователя.
- `phone_number` (String): Номер телефона

**Пример тела запроса:**
```json
{
  "username": "newUser",
  "password": "userPassword",
  "phone_number": "+79*********"
}
```

**Ожидаемый ответ:**  
- `201 Created`: Успешная регистрация. Возвращает объект с идентификатором пользователя.
- `400 Bad Request`: Некорректный запрос.
- `409 Conflict`: Имя пользователя уже занято.

---

#### POST /api/login
**Описание:**  
Аутентификация пользователя и установка сессии.

**Тело запроса:**  
- `username` (String): Имя пользователя.
- `password` (String): Пароль пользователя.

**Пример тела запроса:**
```json
{
  "username": "existingUser",
  "password": "userPassword"
}
```

**Ожидаемый ответ:**  
- `200 OK`: Успешный вход. Возвращает информацию о сессии.
- `400 Bad Request`: Некорректный запрос.
- `401 Unauthorized`: Неверные учетные данные пользователя.

---

#### POST /api/logout
**Описание:**  
Выход пользователя из системы и прекращение сессии.

**Тело запроса:**  
Не требуется.

**Ожидаемый ответ:**  
- `200 OK`: Успешный выход.
- `401 Unauthorized`: Пользователь не вошел в систему.

---

### 2. API профиля пользователя

#### GET /api/user/profile
**Описание:**  
Получение информации о профиле зарегистрированного пользователя.

**Тело запроса:**  
Не требуется.

**Ожидаемый ответ:**  
- `200 OK`: Возвращает профиль пользователя.
- `401 Unauthorized`: Пользователь не авторизирован.

---

#### POST /api/user/profile/update
**Описание:**  
Обновление профиля пользователя.

**Тело запроса:**  
- `name` (String): Новое имя пользователя.
- `location` (String): Новое местоположение пользователя.(лобби, комната)
- `bio` (String): Новая биография пользователя.?

**Пример тела запроса:**
```json
{
  "name": "User Name",
  "location": "User Location",
  "bio": "User Biography"?
}
```

**Ожидаемый ответ:**  
- `200 OK`: Профиль обновлен успешно.
- `400 Bad Request`: Некорректный запрос.
- `401 Unauthorized`: Пользователь не авторизирован.

---

### 3. API игровой сессии

#### POST /api/game/start
**Описание:**  
Начало новой игровой сессии для пользователя.

**Тело запроса:**  
Не требуется.

**Ожидаемый ответ:**  
- `201 Created`: Игровая сессия успешно создана. Возвращает идентификатор сессии.
- `401 Unauthorized`: Пользователь не авторизирован.

---

#### GET /api/game/status
**Описание:**  
Получение текущего состояния игровой сессии.

**Тело запроса:**  
Не требуется.

**Ожидаемый ответ:**  
- `200 OK`: Возвращает текущее состояние сессии.
- `404 Not Found`: Игровая сессия не найдена.
- `401 Unauthorized`: Пользователь не авторизирован.

---

### 4. API игровых действий

#### POST /api/game/move
**Описание:**  
Передача хода игрока на сервер.

**Тело запроса:**  
- `gameId` (String): Идентификатор игровой сессии.
- `move` (Object): Данные о ходе игрока.

**Пример тела запроса:**
```json
{
  "gameId": "game123",
  "move": {
    "from": "A2",
    "to": "A4"
  }
}
```

**Ожидаемый ответ:**  
- `200 OK`: Ход успешно обработан.
- `400 Bad Request`: Некорректный запрос или ход.
- `401 Unauthorized`: Пользователь не авторизирован.
- `404 Not Found`: Игровая сессия не найдена.

---

#### GET /api/game/actions
**Описание:**  
Получение списка доступных действий для игрока в текущей игровой сессии.

**Тело запроса:**  
Не требуется.

**Ожидаемый ответ:**  
- `200 OK`: Возвращает список доступных действий.
- `401 Unauthorized`: Пользователь не авторизирован.
- `404 Not Found`: Игровая сессия не найдена.

---

### 5. API игровой статистики

#### GET /api/game/stats
**Описание:**
Получение статистики игры для пользователя.

**Тело запроса:** 
Не требуется.

Ожидаемый ответ:  
- `200 OK`: Возвращает статистику игр пользователя.
- `401 Unauthorized`: Пользователь не авторизирован.

---

### 6. API взаимодействия с игровыми элементами

#### POST /api/game/figure/move

**Описание:**
Выполняет действие с определенной игровой фигурой.

**Требования:**
Запрос требует аутентификации.

Параметры:  
- figureId: Идентификатор игровой фигуры.
- destination: Целевая позиция для перемещения фигуры.

**Формат запроса:**
```json
{
  "figureId": "1234",
  "destination": "A5"
}
```

**Формат ответа:**
```json
{
  "result": "success",
  "message": "Figure moved successfully to A5."
}
```

**Коды ответа:**
- `200 OK`: Действие успешно выполнено.
- `401 Unauthorized`: Не выполнена аутентификация.
- `404 Not Found`: Указанная фигура не найдена.
- `409 Conflict`: Перемещение невозможно.


#### GET /api/game/figure/options

**Описание:**
Возвращает возможные варианты действий для выбранной фигуры.

**Требования:** 
Запрос требует аутентификации.

**Параметры:**
- `figureId`: Идентификатор игровой фигуры.

**Формат ответа:**
```json
{
  "figureId": "1234",
  "options": [
    "Move to A5",
    "Move to A6",
    "Capture on B5"
  ]
}
```

**Коды ответа:**
- `200 OK`: Успешное получение вариантов действий.
- `401 Unauthorized`: Не выполнена аутентификация.
- `404 Not Found`: Указанная фигура не найдена.

### 7. API чата:


#### POST /api/game/chat/send

**Описание:**  
Отправляет сообщение в игровой чат.

**Требования:**  
Запрос требует аутентификации.

**Параметры:** 
- `message`: сообщение пользователя.

**Формат запроса:**
```json
{
  "message": ":)"
}
```

**Формат ответа:**
```json
{
  "result": "success"
}
```

**Коды ответа:**
- `200 OK`: Сообщение успешно отправлено.
- `401 Unauthorized`: Не выполнена аутентификация.


#### GET /api/game/chat/history

**Описание:**  
Возвращает историю сообщений игрового чата.

**Требования:**  
Запрос требует аутентификации.
```json
Формат ответа:
[
  {
    "timestamp": "2024-04-16T10:48:00Z",
    "user": "Player1",
    "message": ":)"
  },
  {
    "timestamp": "2024-04-16T10:49:00Z",
    "user": "Player2",
    "message": ":("
  }
]
```

**Коды ответа:**
- `200 OK`: Успешное получение истории чата.
- `401 Unauthorized`: Не выполнена аутентификация.

### 8. API уведомлений и/или событий:


#### GET /api/events/latest

**Описание:**  
Возвращает последние события или уведомления для пользователя.

**Требования:**  
Запрос требует аутентификации.

**Формат ответа:**
```json
[
  {
    "timestamp": "2024-04-16T11:00:00Z",
    "event": "Скоро будет Тех. обслуживание"
  },
  {
    "timestamp": "2024-04-16T11:05:00Z",
    "event": "Вам нужно выйти из игры"
  }
]
```

**Коды ответа:**
- `200 OK`: Успешное получение уведомлений.
- `401 Unauthorized`: Не выполнена аутентификация.

### 9. API Техподдержка:

#### POST /api/support/ticket

**Описание:**  
Создает запрос в службу поддержки.

**Требования:**  
Запрос требует аутентификации.

**Параметры:**  
- subject: Тема обращения.
- description: Полное описание проблемы или вопроса.

**Формат запроса:**
```json
{
  "subject": "Проблема с подключением",
  "description": "Не могу подключиться к серверу игры."
}
```
**Формат ответа:**
```json
{
  "ticketId": "SUP-12345",
  "message": "Ваш запрос успешно отправлен в службу поддержки."
}
```

**Коды ответа:**
- `200 OK`: Запрос успешно создан.
- `400 Bad Request`: Некорректные данные запроса.
- `401 Unauthorized`: Не выполнена аутентификация.

### API для администратора:

1. Принудительное завершение игровой сессии:

---

#### POST /api/admin/game/session/end

**Описание**:  
Администратор отправляет запрос для завершения активной игровой сессии.

**Требования**:  
Запрос требует аутентификации администратора.

**Параметры**:  
- `sessionId`: Идентификатор игровой сессии, которую необходимо завершить.

**Формат запроса**:
```json
{
  "sessionId": "session123"
}
```

**Формат ответа**:
```json
{
  "message": "Игровая сессия успешно завершена."
}
```

**Коды ответа**:
- `200 OK`: Действие успешно выполнено.
- `401 Unauthorized`: Не выполнена аутентификация.
- `404 Not Found`: Сессия с указанным ID не найдена.

2. Чтение и ответ на сообщения техподдержки:

---

#### GET /api/admin/support/tickets

**Описание**:  
Администратор получает список всех открытых запросов в службу поддержки.

**Требования**:  
Запрос требует аутентификации администратора.

**Формат ответа**:
```json
[
  {
    "ticketId": "SUP-12345",
    "subject": "Проблема с подключением",
    "status": "Открыт"
  },
  {
    "ticketId": "SUP-12346",
    "subject": "Ошибка в игровом клиенте",
    "status": "Открыт"
  }
]
```

**Коды ответа**:
- `200 OK`: Успешное получение списка запросов.
- `401 Unauthorized`: Не выполнена аутентификация.

---

#### GET /api/admin/support/tickets/{ticketId}

**Описание**:  
Администратор получает информацию по конкретному запросу, используя его идентификатор.

**Требования**:  
Запрос требует аутентификации администратора.

**Формат ответа**:
```json
{
  "ticketId": "SUP-12345",
  "subject": "Проблема с подключением",
  "description": "Не могу подключиться к серверу игры.",
  "status": "Открыт",
  "creationDate": "2024-04-16T12:00:00Z",
  "lastUpdateDate": "2024-04-16T12:30:00Z"
}
```

**Коды ответа**:
- `200 OK`: Успешное получение информации о запросе.
- `401 Unauthorized`: Не выполнена аутентификация.
- `404 Not Found`: Запрос с указанным ID не найден.

---

#### POST /api/admin/support/tickets/{ticketId}/respond

**Описание**:  
Администратор отправляет ответ на запрос в службу поддержки.

**Требования**:  
Запрос требует аутентификации администратора.

**Параметры**:
- `response`: Текст ответа администратора.

**Формат запроса**:
```json
{
  "response": "Проблема была решена, попробуйте подключиться снова."
}
```

**Формат ответа**:
```json
{
  "message": "Ответ успешно отправлен."
}
```

**Коды ответа**:
- `200 OK`: Ответ успешно отправлен.
- `401 Unauthorized`: Не выполнена аутентификация.
- `404 Not Found`: Запрос с указанным ID не найден.

3. Управление пользователями и их профилями:

---

#### GET /api/admin/users/list

**Описание**:  
Получение списка всех пользователей системы.

**Требования**:  
Запрос требует аутентификации администратора.

**Формат ответа**:
```json
[
  {
    "userId": "user123",
    "username": "PlayerOne",
    "status": "Активен"
  },
  {
    "userId": "user124",
    "username": "PlayerTwo",
    "status": "Заблокирован"
  }
]
```

**Коды ответа**:
- `200 OK`: Успешное получение списка пользователей.
- `401 Unauthorized`: Не выполнена аутентификация.

---
?
#### POST /api/admin/users/{userId}/ban

**Описание**:  
Заблокировать пользователя по его идентификатору.

**Требования**:  
Запрос требует аутентификации администратора.

**Параметры**:
- `reason`: Причина блокировки.

**Формат запроса**:
```json
{
  "reason": "Нарушение правил сообщества."
}
```

**Формат ответа**:
```json
{
  "message": "Пользователь успешно заблокирован."
}
```

**Коды ответа**:
- `200 OK`: Пользователь успешно заблокирован.
- `401 Unauthorized`: Не выполнена аутентификация.
- `404 Not Found`: Пользователь с указанным ID не найден.

---
?
#### POST /api/admin/users/{userId}/unban

Описание:  
Разблокировать пользователя.

Требования:  
Запрос требует аутентификации администратора.

Параметры: 
Нет

Формат ответа: 
```json
{
  "message": "Пользователь успешно разблокирован."
}
```

Коды ответа: 
- `200 OK`: Пользователь успешно разблокирован.
- `401 Unauthorized`: Не выполнена аутентификация.
- `404 Not Found`: Пользователь с указанным ID не найден.

#### GET /api/admin/game/sessions

Описание:  
Получение списка всех игровых сессий.

Требования:  
Запрос требует аутентификации администратора.

Формат ответа: 
```json
[
  {
    "sessionId": "session123",
    "startTime": "2024-04-16T10:00:00Z",
    "players": ["PlayerOne", "PlayerTwo"],
    "status": "Активна"
  },
  {
    "sessionId": "session124",
    "startTime": "2024-04-16T11:00:00Z",
    "players": ["PlayerThree", "PlayerFour"],
    "status": "Завершена"
  }
]
```

Коды ответа: 
- `200 OK`: Успешное получение списка сессий.
- `401 Unauthorized`: Не выполнена аутентификация.


#### GET /api/admin/game/stats

Описание:  
Получение общей статистики по играм.

Требования:  
Запрос требует аутентификации администратора.

Формат ответа: 
```json
{
  "totalGamesPlayed": 1234,
  "totalPlayers": 567,
  ?"averageSessionTime": "00:30:00"
}
```

Коды ответа: 
- `200 OK`: Успешное получение статистики.
- `401 Unauthorized`: Не выполнена аутентификация.
